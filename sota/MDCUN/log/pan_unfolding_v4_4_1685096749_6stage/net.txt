pan_unfolding(
  (conv_u): ModuleList(
    (0): Sequential(
      (0): Conv2d(31, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (1): Sequential(
      (0): Conv2d(62, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (2): Sequential(
      (0): Conv2d(93, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (3): Sequential(
      (0): Conv2d(124, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (4): Sequential(
      (0): Conv2d(155, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (5): Sequential(
      (0): Conv2d(186, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (u): ParameterList(
      (0): Parameter containing: [torch.float32 of size ]
      (1): Parameter containing: [torch.float32 of size ]
      (2): Parameter containing: [torch.float32 of size ]
      (3): Parameter containing: [torch.float32 of size ]
      (4): Parameter containing: [torch.float32 of size ]
      (5): Parameter containing: [torch.float32 of size ]
  )
  (eta): ParameterList(
      (0): Parameter containing: [torch.float32 of size ]
      (1): Parameter containing: [torch.float32 of size ]
      (2): Parameter containing: [torch.float32 of size ]
      (3): Parameter containing: [torch.float32 of size ]
      (4): Parameter containing: [torch.float32 of size ]
      (5): Parameter containing: [torch.float32 of size ]
  )
  (gama): ParameterList(
      (0): Parameter containing: [torch.float32 of size ]
      (1): Parameter containing: [torch.float32 of size ]
      (2): Parameter containing: [torch.float32 of size ]
      (3): Parameter containing: [torch.float32 of size ]
      (4): Parameter containing: [torch.float32 of size ]
      (5): Parameter containing: [torch.float32 of size ]
  )
  (delta): ParameterList(
      (0): Parameter containing: [torch.float32 of size ]
      (1): Parameter containing: [torch.float32 of size ]
      (2): Parameter containing: [torch.float32 of size ]
      (3): Parameter containing: [torch.float32 of size ]
      (4): Parameter containing: [torch.float32 of size ]
      (5): Parameter containing: [torch.float32 of size ]
  )
  (conv_up): Conv_up(
    (body): Sequential(
      (0): Conv2d(31, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
    )
    (tail): Sequential(
      (0): Upsample(scale_factor=4.0, mode='nearest')
      (1): Conv2d(64, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (2): Conv2d(31, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (conv_down): Conv_down(
    (body): Sequential(
      (0): Conv2d(31, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
    )
    (tail): Sequential(
      (0): MaxPool2d(kernel_size=4, stride=4, padding=0, dilation=1, ceil_mode=False)
      (1): Conv2d(64, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (2): Conv2d(31, 31, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (rm1): att_spatial(
    (block): Sequential(
      (0): ConvBlock(
        (act): PReLU(num_parameters=1)
        (conv): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (1): ResnetBlock(
        (act): PReLU(num_parameters=1)
        (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (layers): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PReLU(num_parameters=1)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): PReLU(num_parameters=1)
        )
      )
      (2): ResnetBlock(
        (act): PReLU(num_parameters=1)
        (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (layers): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PReLU(num_parameters=1)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): PReLU(num_parameters=1)
        )
      )
      (3): ResnetBlock(
        (act): PReLU(num_parameters=1)
        (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (layers): Sequential(
          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PReLU(num_parameters=1)
          (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): PReLU(num_parameters=1)
        )
      )
    )
    (spatial): ConvBlock(
      (act): PReLU(num_parameters=1)
      (conv): Conv2d(2, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
  (NLBlock): blockNL(
    (softmax): Softmax(dim=-1)
    (t): Conv2d(31, 31, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (p): Conv2d(31, 31, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (g): Conv2d(31, 31, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (w): Conv2d(31, 31, kernel_size=(1, 1), stride=(1, 1), bias=False)
  )
  (hf_pan): Conv2d(3, 1, kernel_size=(1, 1), stride=(1, 1))
)
